################
High Level

    Nie trzeba ręcznie zarządzać pamięcią i zasobami, języki wysokiego poziomu robią to automatycznie, kosztem wydajności. W językach niskiego poziomu typu C, musimy sami zarządzać dostępnymi zaobami, co czyni aplikacje pisane w tych językach bardziej wydajnymi.

################
Garbage-Collection

    Algorytm wewnątrz jęzka JS, który automatycznie usuwa stare, nieużywane obiekty z pamięci komputera, by nie zapchać zasobów komputera niepotrzebnymi rzeczami

################
Interpreted or just-in-time compiled

    Komputer rozumie tylko binarny kod maszynowy, kod JS piszemy w formie zrozumiałem dla ludzi więc potrzebujemy translatora między tymi dwoma zapisami, może to nastąpić za pomocą kompilatora albo interpretera. W przypadku JS następuje to wewnątrz silnika JS 

################
Multi-paradigm language

    To czyni JS tak popularnym językiem. Paradygmat to podejście lub mindset strukturyzowania kodu, który ukierunkowuje styl i technikę programowania w danym projekcie, który wykorzystuje dany paradygmat. Poniżej trzy popularne paradygmaty:

        1) Procedural programming
            To co robimy obecnie, programy liniowe, z wykorzystaniem zastosowania funkcji pomiędzy

        2) Object-oriented programming (OOP)

        3) Functional programmin (FP)
    
    Można też klasyfikować paradygmat jako imperatywny lub deklaratywny. Wiele języków jest tylko proceduralne albo objektowo zorientowane lub tylko funkcjonalne, natomiast JS można zastosować każdy z tych paradygmatów

################
Prototype-based object oriented approach

    Prawie wszystko w JS jest obiektem, poza typami prostymi tzn Number, String etc. Tworzenie obiektu, np tabeli to tworzenie go z blue printu tabeli co jest nazywane prototypem, ten prototym ma w sobie wszystkie możliwe metody, jakie można wywołać dla tego nowo stworzonego obiektu.

################
First-class functins

    In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions.  To jest bardzo powerfull, bo pozwala nam korzystać z bardzo powerfull technik i pozwala zastosować paradygmat funkcjonal-programming

################
Dynamically-typed language

    Język dynamicznie typowany, nie trzeba wpisywać ręcznie typów zmiennych. JS przypisuje typy automatycznie dopiero jak wykonuje kod, widzi cyfrę więc przypisuje Number. Typ zmiennych może być łatwo zmieniany, gdzy przypisujemy zmiennej inną wartość. I właśnie to oznacza dynamically-typed language.
        Jest wiele kontrowersji, cz to dobra czy złe, że JS działa w ten sposób, ale nie warto na razie się nad tym zastanawiać. Po prostu tak działa JS. 

################
Non-blocking event loop (concurrency model)

    Jest to termin opisjący jak JS ogarnia wiele zadań odbywających się w tym samym czasie.

        Dlaczego tego potrzeujemy?
    
    JS jest jednowątkowy, więc może wykonać tylko jedna zadanie na raz. Wątek to zbiór instrukcji, wykonywanych przez CPU.

        Co jeśli mamy dłogofalowe zadanie (long-running task)? Jak np pobieranie danych z remote server?

    Wydaje się, że to zablokuje jeden wątek w trakcie wykonywania programu, w związku z tym chcemy tzw non-blocking behavior

        Jak to uzyskamy?

    By using an event loop: takes long running tasks, executes them in the "background", and puts them back in the main thread once they are finished.


                    #######################
                    //TODO The JavaScript Engine and Runtime
                    #######################

################
Js Engine

    Program that executes JS code. Każda przeglądarka ma swój JS engine. Najbardziej znanym językiem jest V8 od google, który napędza Chroma ale też NodeJS za pomocą którego mozemy tworzyć aplikacje po stronie serwera, poza przeglądarką. 
        
    Każdy JS Engine zawiera Call Stack oraz Heap

        Call Stack (stos) - to miejsce gdzie kod jest wykonywany przy wykorzystaniu tzw "execution contexts" 

        Heat (sterta) - to nieustrukturyzowana pula pamięci, przechowująca wszystkie objekty, których nasza aplikacja będzie potrzebować.

    Jak kod JS jest tłumaczony na kod maszynowy?

        Kompilator i interpreter - różnice: 
        
            Compilation: W przypadku kompilacji, cały kod JS jest konwertowany na kod maszynowy RAZ, jest zapisywany nastepnie do przenośnego plikuk, który moze być odpalony na dowolnym komputerze

            Interpretation: W tym przypadku interpreter leci przez kod wykonując go linijka po linijce. Kod jest tłumaczony na język maszynowy na bierząco

JS jest językiem interpretowalnym, problemem tych języków jest ich niska prędkość wykonywania, na początku dla JS nie stanowiło to dużego problemu, jednak obecnie przy rozbudowanych aplikacjach webowych już tak.

Nowoczesny JS urzywa mieszanki interpretacji i kompilacji swojego kodu, co jest nazywane "just in time compilation" Za pomocą tego podejścia kompiluje cały kod raz i potem wykonuje go od razu. W związku z czym mamy do czynienia z dwoma krokami kompilacji, bez przenośnego pliku exe. Execution następuje natychmiast po kompilacji.

To bardzo przyspiesza wykonanie programu.

            https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/22648473#notes

            5:00:00

 JS Runtime

    Możemy sobie wyobrazić JS runtime jako wielki box, czy kontener który zawiera wszystko co potrzebujemy w celu wykorzystania JS w przeglądarce. Sercem każdego JS Runtime jest JS Engine. Sam język to nie wszystko, by działać odpowiednio runtime potrzebuje dostęp do web APIs (wszystko związane z DOM or timers or console.log). To nie jest część JS, JS ma do nich dostępo poprzez global window object. JS runtime zawiera również tzw "callback queue". Są to struktury danych zawierające wszystkie callback functions (click, timer, data, etc...) które są gotowe do wykonania. Np event handler function (funkcja obsługi zdarzeń)

    Czyli tak to działa od kuchni: 

    Pierwsza rzecz, która się wydarza po wykryciu zdarzenia to to, że callback function jest załadowana do callback queue (kolejka), następnie gdy call stack w silniku jest pusty, callback function jest ładowana do stosu, gdzie może być executed. Właśnie to nazywane jest tzw Event loop





                ### video_91 ###

                //TODO Execution Contexts and The Call Stack

                ### video_92 ###

                //TODO Scope and The Scope Chain

Scoping: 

    How our program's variables are organized and accessed.   "Where do variables live?" or "Where can we access a certain variable, and where not?"

Lexical scoping: 

    Scoping is controlled by placement of functions and blocks in the code 

Scope: 
    
    Place in our code where variables are declared.

    Space or environment in which a certain variable is declared (variable environment in case of functions). There is global scope, function score and block scope

Scope of a variable: 

    Region of our code where a certain variable can be accessed

            

Three Types Of Scope:

    Global Scope    

        - Outside of any function or block
        - Variables declared in global scope are accessible everywhere - because they are on top of the scope chain 

    Function Scope

        - Variables are accessible only inside function, NOT Outside
        - Also called local scope

    Block Scope (ES6)

        - Variables are accessible only inside block (block scoped)
        - HOWEVER, this only applies to let and const variables!
        - Function are also block scoped (only in strict mode)

        Block Scope only work for the ES6 variables types (let, const) "var" is not scoped to just this block. Jeśli więc zmienna typu var istnieje w bloku if, a blok if jest zawarty w funkcji x to ta zmienna typu "var" należy do scopa funkcji x, a nie tylko instrukcji if 

Variable loockup in scope chain 

    Only the lastest scope has an access to an oldest. Only parent scope can be used, but no child scopes. Scope chain only works upwards, not sideways.

    The child scopes or sibiling scopes are not accesible in both ways - because of LEXICAL SCOPING! - Because one is not written inside the other one. 

    //TODO Scope chain has nothing to do with the order in which function were called

    It has nothig to do with execution contexts in the call stack. The scope chain does get the variable environments from the execution context.
     The order of function calls is not relevant to the scope chain at all

    //FIXME 18:27 - SCOPE CHAIN VS. CALL STACK


                ### video_94 ###

                //TODO Variable Environment: Hoisting and The TDZ

How variables are creating in JS?

Hoisting

    Makes some types of variables accessible/usable in the code before they are actually declared. "Variables magicaly lifted to the top ot their scope".

        Behind the scenes: 

    Before execution, code is scanned for variable declarations, and for each variable, a new properity is created in the VARIABLE ENVIRONMENT OBJECT.

                ### video_96 ###

                //TODO The this Keyword

this keyword/variable:

    Special variable that is created for every execution context (every funciton). Takes the value of (points to) the "owner" of the function in which the this keyword is used.

    this is NOT static. It depends on how the function is called, and its value is only assigned when the function is actually called.

        Method => this = <object that is calling the method>

        Simply function call => this = undefined

        Arrow functions => this = <this of surrounding function (lexical this)>

        Event listener => this = <DOM element that the handler is attached to>

        new, call, apply, bind... => later in the course
